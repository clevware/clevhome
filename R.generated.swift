// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `first`.
    static let first = ImageResource(bundle: _R.hostingBundle, name: "first")
    /// Image `light_bright`.
    static let light_bright = ImageResource(bundle: _R.hostingBundle, name: "light_bright")
    /// Image `light_dark`.
    static let light_dark = ImageResource(bundle: _R.hostingBundle, name: "light_dark")
    /// Image `second`.
    static let second = ImageResource(bundle: _R.hostingBundle, name: "second")
    
    /// `UIImage(named: "first", bundle: ..., traitCollection: ...)`
    static func first(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.first, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "light_bright", bundle: ..., traitCollection: ...)`
    static func light_bright(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.light_bright, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "light_dark", bundle: ..., traitCollection: ...)`
    static func light_dark(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.light_dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "second", bundle: ..., traitCollection: ...)`
    static func second(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.second, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `indexCell`.
    static let indexCell: ReuseIdentifier<IndexTableViewCell> = ReuseIdentifier(identifier: "indexCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `Account`.
    static let account = _R.storyboard.account()
    /// Storyboard `Control`.
    static let control = _R.storyboard.control()
    /// Storyboard `Index`.
    static let index = _R.storyboard.index()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Account", bundle: ...)`
    static func account(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.account)
    }
    
    /// `UIStoryboard(name: "Control", bundle: ...)`
    static func control(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.control)
    }
    
    /// `UIStoryboard(name: "Index", bundle: ...)`
    static func index(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.index)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  static let hostingBundle = Bundle(identifier: "com.clevware.clevhome") ?? Bundle.main
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try index.validate()
    }
    
    struct account: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Account"
      
      fileprivate init() {}
    }
    
    struct control: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Control"
      
      fileprivate init() {}
    }
    
    struct index: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Index"
      
      static func validate() throws {
        if UIImage(named: "light_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'light_dark' is used in storyboard 'Index', but couldn't be loaded.") }
        if UIImage(named: "light_bright") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'light_bright' is used in storyboard 'Index', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainTabbarController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}